- main.c will work out the CLI
- init.c will listen on appropriate port
- handler.c will read from socket and send it to parser.c
  It will create the request struct and send it to parser.c
- parser.c will build the structs from the parsed http
- handler.c will handle the request and build a response struct
- response.c will respond to the request
  (501 when not-implemented method)

- http_constants.h will hold all http constants
- structs.h


Struct request
**************
- Where is the memory allocated?
- How to guarantee, when you get a struct, that it's initialized?

Prop 1: Use gbuf for header_node list and uri. Have a
     	request_init function
Prop 2: Have additional boolean fields (for initialized or not)
     	- Probably worst design possible
Prop 3: Trust that parser allocates and handler frees?
     	- Looks really bug prone


Questions about http
**********************
How is content other than text handled? char array, but
really is just bytes...
TODO: include an img in index.html (with a real src, and see how
you handle that)

